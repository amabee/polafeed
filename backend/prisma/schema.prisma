generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ==================
// ðŸ“¦ User Models
// ==================
model User {
  id            String   @id
  username      String   @unique
  email         String   @unique
  password      String
  bio           String?
  profilePicUrl String?
  posts         Post[]
  createdAt     DateTime @default(now())

  userInformation   UserInformation?
  UserCustomization UserCustomization?
  PostCardStyle     PostCardStyle[]
}

model UserInformation {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  firstName String
  lastName  String
  address   String
  birthDate DateTime
  phone     String
  gender    String

  user User @relation(fields: [userId], references: [id])
}

// =============================
// ðŸ‘¥ USER CUSTOMIZATION Models
// =============================

model UserCustomization {
  id               String  @id
  userId           String  @unique
  backgroundUrl    String? // Can be an image or maybe just a color Â¯\_(ãƒ„)_/Â¯
  profileCardStyle Json? // JSON for layouts, fonts, etc...
  loadingScreen    String?
  theme            String?
  font             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// =============================
// ðŸ’» Theme Asset Models
// =============================

model ThemeAsset {
  id        String @id
  creatorId String

  name        String
  description String?
  isPublic    Boolean @default(true)

  backgroundUrl    String?
  theme            String?
  font             String?
  profileCardStyle Json?
  loadingScreen    String?

  createdAt DateTime @default(now())
}

// ==================
// ðŸ“¸ Post Models
// ==================
model Post {
  id        String   @id
  userId    String
  caption   String?
  imageUrl  String
  createdAt DateTime @default(now())

  postCardStyleId String?

  user User @relation(fields: [userId], references: [id])
}

// ==================
// ðŸ“¸ Post Card Style Models
// ==================
model PostCardStyle {
  id        Int     @id @default(autoincrement())
  name      String?
  creatorId String

  // Layout options
  layout   Layout @default(classic)
  rotation Int?

  // Background styling
  background Json? 

  // Border styling
  borderStyle Json?
  borderImage Json?

  // Typography
  font         String?
  captionStyle Json? 

  // Effects
  shadow String?

  badgeStyle Json?

  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator User @relation(fields: [creatorId], references: [id])
}

enum Layout {
  classic
  vertical
  compact
  wide
  square
}
